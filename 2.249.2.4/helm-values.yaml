Agents:
  Enabled: true
  Image:
    dockerImage: cloudbees/cloudbees-core-agent:2.249.2.4
  SeparateNamespace:
    Create: false
    Enabled: false
    Name: null
Hibernation:
  Enabled: false
  Image:
    dockerImage: cloudbees/managed-master-hibernation-monitor:230.ee066a318539
    dockerPullPolicy: IfNotPresent
Master:
  Enabled: true
  Image:
    dockerImage: cloudbees/cloudbees-core-mm:2.249.2.4
    dockerPullPolicy: Always
    longName: CloudBees Core - Managed Master - 2.249.2.4
  JavaOpts: null
  OperationsCenterNamespace: null
NetworkPolicy:
  Enabled: false
  JMXSelectors: []
  ingressControllerSelector: []
OperationsCenter:
  AgentListenerPort: 50000
  Annotations: {}
  CSRF:
    ProxyCompatibility: false
  ContainerPort: 8080
  ContextPath: /cjoc
  Enabled: true
  HealthProbeLivenessFailureThreshold: 12
  HealthProbes: true
  HostName: core-gke.pcherry.uk
  Image:
    dockerImage: cloudbees/cloudbees-cloud-core-oc:2.249.2.4
    dockerPullPolicy: Always
  ImagePullSecrets: null
  Ingress:
    Annotations:
      cert-manager.io/cluster-issuer: letsencrypt-core-gke-pcherry-uk
      kubernetes.io/tls-acme: "false"
    Class: nginx
    tls:
      Enable: true
      Host: core-gke.pcherry.uk
      SecretName: cbci-priv-key-letsencrypt
  JavaOpts: null
  JenkinsOpts: null
  LoadBalancerIP: null
  LoadBalancerSourceRanges:
  - 0.0.0.0/0
  NodeSelector: {}
  Platform: standard
  Protocol: http
  Resources:
    Limits:
      Cpu: 1
      Memory: 2G
    Requests:
      Cpu: 1
      Memory: 2G
  Route:
    tls:
      Enable: false
  ServiceAgentListenerPort: 50000
  ServiceAnnotations: {}
  ServicePort: 80
  ServiceType: ClusterIP
  Tolerations: []
Persistence:
  AccessMode: ReadWriteOnce
  Annotations: {}
  ExistingClaim: jenkins-home-cjoc-0
  Size: 20Gi
  StorageClass: null
  mounts: []
  volumes: []
PodSecurityPolicy:
  Annotations: {}
  Enabled: false
ingress-nginx:
  Enabled: false
  controller:
    addHeaders: {}
    admissionWebhooks:
      enabled: true
      failurePolicy: Fail
      patch:
        enabled: true
        image:
          pullPolicy: IfNotPresent
          repository: docker.io/jettech/kube-webhook-certgen
          tag: v1.2.2
        nodeSelector: {}
        podAnnotations: {}
        priorityClassName: ""
        runAsUser: 2000
        tolerations: []
      port: 8443
      service:
        annotations: {}
        externalIPs: []
        loadBalancerSourceRanges: []
        servicePort: 443
        type: ClusterIP
    affinity: {}
    annotations: {}
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    autoscalingTemplate: []
    config: {}
    configAnnotations: {}
    configMapNamespace: ""
    containerPort:
      http: 80
      https: 443
    customTemplate:
      configMapKey: ""
      configMapName: ""
    dnsConfig: {}
    dnsPolicy: ClusterFirst
    electionID: ingress-controller-leader
    enableMimalloc: false
    extraArgs: {}
    extraContainers: []
    extraEnvs: []
    extraInitContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    healthCheckPath: /healthz
    hostNetwork: false
    hostPort:
      enabled: false
      ports:
        http: 80
        https: 443
    image:
      allowPrivilegeEscalation: true
      digest: sha256:fc4979d8b8443a831c9789b5155cded454cb7de737a8b727bc2ba0106d2eae8b
      pullPolicy: IfNotPresent
      repository: k8s.gcr.io/ingress-nginx/controller
      runAsUser: 101
      tag: v0.35.0
    ingressClass: nginx
    kind: Deployment
    labels: {}
    lifecycle:
      preStop:
        exec:
          command:
          - /wait-shutdown
    livenessProbe:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 10
      port: 10254
      successThreshold: 1
      timeoutSeconds: 1
    metrics:
      enabled: false
      port: 10254
      prometheusRule:
        additionalLabels: {}
        enabled: false
        rules: []
      service:
        annotations: {}
        externalIPs: []
        loadBalancerSourceRanges: []
        servicePort: 9913
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        metricRelabelings: []
        namespace: ""
        namespaceSelector: {}
        scrapeInterval: 30s
        targetLabels: []
    minAvailable: 1
    minReadySeconds: 0
    nodeSelector:
      kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    podSecurityContext: {}
    priorityClassName: ""
    proxySetHeaders: {}
    publishService:
      enabled: true
      pathOverride: ""
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      port: 10254
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    reportNodeInternalIp: false
    resources:
      requests:
        cpu: 100m
        memory: 90Mi
    scope:
      enabled: false
      namespace: ""
    service:
      annotations: {}
      enableHttp: true
      enableHttps: true
      enabled: true
      externalIPs: []
      externalTrafficPolicy: Local
      internal:
        annotations: {}
        enabled: false
      labels: {}
      loadBalancerSourceRanges: []
      nodePorts:
        http: ""
        https: ""
        tcp: {}
        udp: {}
      ports:
        http: 80
        https: 443
      targetPorts:
        http: http
        https: https
      type: LoadBalancer
    sysctls: {}
    tcp:
      annotations: {}
      configMapNamespace: ""
    terminationGracePeriodSeconds: 300
    tolerations: []
    udp:
      annotations: {}
      configMapNamespace: ""
    updateStrategy: {}
  defaultBackend:
    affinity: {}
    enabled: false
    extraArgs: {}
    extraEnvs: []
    image:
      pullPolicy: IfNotPresent
      repository: k8s.gcr.io/defaultbackend-amd64
      runAsUser: 65534
      tag: "1.5"
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    minAvailable: 1
    nodeSelector:
      kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    podSecurityContext: {}
    port: 8080
    priorityClassName: ""
    readinessProbe:
      failureThreshold: 6
      initialDelaySeconds: 0
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      externalIPs: []
      loadBalancerSourceRanges: []
      servicePort: 80
      type: ClusterIP
    serviceAccount:
      create: true
      name: null
    tolerations: []
  global: {}
  imagePullSecrets: []
  maxmindLicenseKey: ""
  podSecurityPolicy:
    enabled: false
  rbac:
    create: true
    scope: false
  revisionHistoryLimit: 10
  serviceAccount:
    create: true
    name: null
  tcp: {}
  udp: {}
nginx-ingress:
  Enabled: true
  controller:
    addHeaders: {}
    admissionWebhooks:
      enabled: false
      failurePolicy: Fail
      patch:
        enabled: true
        image:
          pullPolicy: IfNotPresent
          repository: jettech/kube-webhook-certgen
          tag: v1.0.0
        nodeSelector: {}
        podAnnotations: {}
        priorityClassName: ""
        resources: {}
      port: 8443
      service:
        annotations: {}
        externalIPs: []
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        omitClusterIP: false
        servicePort: 443
        type: ClusterIP
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    config: {}
    configMapNamespace: ""
    containerPort:
      http: 80
      https: 443
    customTemplate:
      configMapKey: ""
      configMapName: ""
    daemonset:
      hostPorts:
        http: 80
        https: 443
      useHostPort: false
    defaultBackendService: ""
    deploymentAnnotations: {}
    deploymentLabels: {}
    dnsConfig: {}
    dnsPolicy: ClusterFirst
    electionID: ingress-controller-leader
    extraArgs: {}
    extraContainers: []
    extraEnvs: []
    extraInitContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    hostNetwork: false
    image:
      allowPrivilegeEscalation: true
      pullPolicy: IfNotPresent
      repository: quay.io/kubernetes-ingress-controller/nginx-ingress-controller
      runAsUser: 101
      tag: 0.32.0
    ingressClass: nginx
    kind: Deployment
    lifecycle: {}
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      port: 10254
      successThreshold: 1
      timeoutSeconds: 1
    maxmindLicenseKey: ""
    metrics:
      enabled: false
      port: 10254
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      service:
        annotations: {}
        externalIPs: []
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        omitClusterIP: false
        servicePort: 9913
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        namespace: ""
        namespaceSelector: {}
        scrapeInterval: 30s
    minAvailable: 1
    minReadySeconds: 0
    name: controller
    nodeSelector:
      kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    podSecurityContext: {}
    priorityClassName: ""
    proxySetHeaders: {}
    publishService:
      enabled: false
      pathOverride: ""
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      port: 10254
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    reportNodeInternalIp: false
    resources: {}
    scope:
      enabled: false
      namespace: ""
    service:
      annotations: {}
      enableHttp: true
      enableHttps: true
      enabled: true
      externalIPs: []
      externalTrafficPolicy: Local
      healthCheckNodePort: 0
      internal:
        annotations: {}
        enabled: false
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        http: ""
        https: ""
        tcp: {}
        udp: {}
      omitClusterIP: false
      ports:
        http: 80
        https: 443
      sessionAffinity: ""
      targetPorts:
        http: http
        https: https
      type: LoadBalancer
    tcp:
      configMapNamespace: ""
    terminationGracePeriodSeconds: 60
    tolerations: []
    udp:
      configMapNamespace: ""
    updateStrategy: {}
    useComponentLabel: false
  defaultBackend:
    affinity: {}
    deploymentLabels: {}
    enabled: true
    extraArgs: {}
    extraEnvs: []
    image:
      pullPolicy: IfNotPresent
      repository: k8s.gcr.io/defaultbackend-amd64
      runAsUser: 65534
      tag: "1.5"
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    minAvailable: 1
    name: default-backend
    nodeSelector:
      kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    podSecurityContext: {}
    port: 8080
    priorityClassName: ""
    readinessProbe:
      failureThreshold: 6
      initialDelaySeconds: 0
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      externalIPs: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      omitClusterIP: false
      servicePort: 80
      type: ClusterIP
    serviceAccount:
      create: true
    tolerations: []
    useComponentLabel: false
  global: {}
  imagePullSecrets: []
  podSecurityPolicy:
    enabled: false
  rbac:
    create: true
    scope: false
  releaseLabelOverride: ""
  revisionHistoryLimit: 10
  serviceAccount:
    annotations: {}
    create: true
  tcp:
    "50000": cloudbees-core/cjoc:50000:PROXY
  udp: {}
rbac:
  agentsServiceAccountName: jenkins-agents
  hibernationMonitorServiceAccountName: managed-master-hibernation-monitor
  install: true
  masterServiceAccountName: jenkins
  serviceAccountName: cjoc
sidecarinjector:
  Enabled: false
